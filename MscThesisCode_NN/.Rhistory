dim(z)
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l)')
h <- function(l,x) (1-exp(-u*x/D))/(1-exp(-u*l/D))
# make a contour plot
x <- seq(0,10,0.1)
z <- outer(l,x, h)
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l)')
u = 0
l = seq(1,10,0.1)
sigma = 0.25
D = sigma^2/2
h <- function(l,x) (1-exp(-u*x/D))/(1-exp(-u*l/D))
# make a contour plot
x <- seq(0,10,0.1)
z <- outer(l,x, h)
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l)')
u = 0.1
l = seq(1,10,0.1)
sigma = 0.25
D = sigma^2/2
h <- function(l,x) (1-exp(-u*x/D))/(1-exp(-u*l/D))
# make a contour plot
x <- seq(0,10,0.1)
z <- outer(l,x, h)
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l)')
u = 0.1
l = seq(1,10,0.1)
sigma = 0.5
D = sigma^2/2
h <- function(l,x) (1-exp(-u*x/D))/(1-exp(-u*l/D))
# make a contour plot
x <- seq(0,10,0.1)
z <- outer(l,x, h)
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l)')
flag = ifelse(x < l, 0, 1)
h <- function(l,x){
flag = ifelse(x < l, 0, 1)
return(flag*(1-exp(-u*x/D))/(1-exp(-u*l/D)))
}
# make a contour plot
x <- seq(0,10,0.1)
z <- outer(l,x, h)
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l)')
u = 0.1
l = seq(1,10,0.1)
sigma = 0.5
D = sigma^2/2
h <- function(l,x){
flag = ifelse(x < l, 1, 0)
return(flag*(1-exp(-u*x/D))/(1-exp(-u*l/D)))
}
# make a contour plot
x <- seq(0,10,0.1)
z <- outer(l,x, h)
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l)')
u = -0.1
l = seq(1,10,0.1)
sigma = 0.5
D = sigma^2/2
h <- function(l,x){
flag = ifelse(x < l, 1, 0)
return(flag*(1-exp(-u*x/D))/(1-exp(-u*l/D)))
}
# make a contour plot
x <- seq(0,10,0.1)
z <- outer(l,x, h)
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l)')
u = 0.1
l = seq(1,10,0.1)
sigma = 1.5
D = sigma^2/2
h <- function(l,x){
flag = ifelse(x < l, 1, 0)
return(flag*(1-exp(-u*x/D))/(1-exp(-u*l/D)))
}
# make a contour plot
x <- seq(0,10,0.1)
z <- outer(l,x, h)
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l)')
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l) for sigma = 1.5')
u = 0.1
l = seq(1,10,0.01)
sigma = 1.5
D = sigma^2/2
h <- function(l,x){
flag = ifelse(x < l, 1, 0)
return(flag*(1-exp(-u*x/D))/(1-exp(-u*l/D)))
}
# make a contour plot
x <- seq(0,10,0.01)
z <- outer(l,x, h)
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l) for sigma = 1.5')
u = 0.1
l = seq(1,10,0.01)
sigma = 1.5
D = sigma^2/2
h <- function(l,x){
flag = ifelse(x <= l, 1, 0)
return(flag*(1-exp(-u*x/D))/(1-exp(-u*l/D)))
}
# make a contour plot
x <- seq(0,10,0.01)
z <- outer(l,x, h)
contour(l,x,z, xlab = 'x', ylab = 'l', main = 'h(x,l) for sigma = 1.5')
contour(l,x,z, xlab = 'l', ylab = 'x', main = 'h(x,l) for sigma = 1.5')
contour(l,x,z, xlab = 'l', ylab = 'x', main = 'P(exit at l) h(x,l) for sigma = 1.5')
contour(l,x,z, xlab = 'l', ylab = 'x', main = 'P(exit at l), h(x,l) for sigma = 1.5')
u = 0.1
l = seq(1,10,0.01)
sigma = 0.5
D = sigma^2/2
h <- function(l,x){
flag = ifelse(x <= l, 1, 0)
return(flag*(1-exp(-u*x/D))/(1-exp(-u*l/D)))
}
# make a contour plot
x <- seq(0,10,0.01)
z <- outer(l,x, h)
contour(l,x,z, xlab = 'l', ylab = 'x', main = 'P(exit at l), h(x,l) for sigma = 1.5')
contour(l,x,z, xlab = 'l', ylab = 'x', main = 'P(exit at l), h(x,l) for sigma = 0.5')
?outer
?contour
contour(x = l,y = x,z, xlab = 'l', ylab = 'x', main = 'P(exit at l), h(x,l) for sigma = 0.5')
?contour
contour(x = l,y = x,z, xlab = 'l', ylab = 'x',col = par("fg"), main = 'P(exit at l), h(x,l) for sigma = 0.5')
contour(x = l,y = x,z, xlab = 'l', ylab = 'x',nlevels = 20, main = 'P(exit at l), h(x,l) for sigma = 0.5')
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
set.seed(1)
gbm1 = gbm(n = 100, mu = mu1, sigma = sigma1, t = 1, type = "path")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
set.seed(1)
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
set.seed(1)
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
set.seed(1)
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
# add 95% confidence interval
lines(gbm + 1.96 * sigma1 * sqrt(1:1001/365), col = "red", lwd = 2, lty = 2)
lines(gbm - 1.96 * sigma1 * sqrt(1:1001/365), col = "red", lwd = 2, lty = 2)
mu1 = 0.06
sigma1 = 0.15
# simulate geometric brownian motion
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
# plot
plot(gbm, type = "l", col = "blue", lwd = 2, xlab = "Days", ylab = "Price")
# add 95% confidence interval
lines(gbm + 1.96 * sigma1 * sqrt(1:1001/365), col = "red", lwd = 2, lty = 2)
lines(gbm - 1.96 * sigma1 * sqrt(1:1001/365), col = "red", lwd = 2, lty = 2)
sims <- 1000
finalvalue_of_gbm = rep(NA, sims)
for (n in 1:sims) {
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
finalvalue_of_gbm[n] = gbm[100]
}
hist(finalvalue_of_gbm, breaks = 50, col = "blue", xlab = "Price", main = "Histogram of final value of GBM")
sims <- 10000
finalvalue_of_gbm = rep(NA, sims)
for (n in 1:sims) {
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
finalvalue_of_gbm[n] = gbm[100]
}
hist(finalvalue_of_gbm, breaks = 50, col = "blue", xlab = "Price", main = "Histogram of final value of GBM")
sims <- 10000
finalvalue_of_gbm = rep(NA, sims)
for (n in 1:sims) {
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
finalvalue_of_gbm[n] = gbm[1000]
}
hist(finalvalue_of_gbm, breaks = 50, col = "blue", xlab = "Price", main = "Histogram of final value of GBM")
abline(v = mean(finalvalue_of_gbm), col = "red", lwd = 2)
sims <- 1000
finalvalue_of_gbm = rep(NA, sims)
for (n in 1:sims) {
gbm = rep(NA, 1000)
gbm[1] = 100
for (i in 1:1000) {
gbm[i+1] = gbm[i] * exp((mu1 - 0.5 * sigma1^2) * 1/365 + sigma1 * sqrt(1/365) * rnorm(1))
}
finalvalue_of_gbm[n] = gbm[1000]
}
hist(finalvalue_of_gbm, breaks = 50, col = "blue", xlab = "Price", main = "Histogram of final value of GBM")
abline(v = mean(finalvalue_of_gbm), col = "red", lwd = 2)
valuesToTry <- seq(1,40, length.out = 500)
ExtraReturnForValueBuyOutlierRem <- 0 * valuesToTry
ExtraReturnForValueBuy <- 0 * valuesToTry
ExtraReturnForValueSell <- 0 * valuesToTry
for (i in 1:length(valuesToTry)) {
print("Buy")
ExtraReturnForValueBuy[i] <- calculateExtraReturnBuy(valuesToTry[i])
print("sell")
ExtraReturnForValueSell[i] <- calculateExtraReturnSell(valuesToTry[i])
# ExtraReturnForValueBuyOutlierRem[i] <- calculateExtraReturnBuyOutLierRemove(valuesToTry[i])
}
# removing some extreme outliers from dfBuy
dfBuyOutlierRem <- dfBuy[abs(dfBuy$Premium)< 500,]
load("~/Dropbox/DTU_(Semester_9)/SC_EnergyTrading/IdeaFromPeter/.RData")
# now let's find the optimal value to bid with
calculateExtraReturnBuy <- function(value){
isAboveBestPrice <- (dfBuy$ClearingPrice - value) > dfBuy$BestPrice
print(sum(na.omit(isAboveBestPrice)))
return(sum(na.omit(isAboveBestPrice*value)))
}
calculateExtraReturnBuyOutLierRemove <- function(value){
isAboveBestPrice <- (dfBuyOutlierRem$ClearingPrice - value) > dfBuyOutlierRem$BestPrice
print(sum(na.omit(isAboveBestPrice)))
return(sum(na.omit(isAboveBestPrice*value)))
}
calculateExtraReturnSell <- function(value){
isAboveBestPrice <- (dfSell$ClearingPrice + value) < dfSell$BestPrice
print(sum(na.omit(isAboveBestPrice)))
return(sum(na.omit(isAboveBestPrice*value)))
}
valuesToTry <- seq(1,40, length.out = 500)
ExtraReturnForValueBuyOutlierRem <- 0 * valuesToTry
ExtraReturnForValueBuy <- 0 * valuesToTry
ExtraReturnForValueSell <- 0 * valuesToTry
for (i in 1:length(valuesToTry)) {
print("Buy")
ExtraReturnForValueBuy[i] <- calculateExtraReturnBuy(valuesToTry[i])
print("sell")
ExtraReturnForValueSell[i] <- calculateExtraReturnSell(valuesToTry[i])
# ExtraReturnForValueBuyOutlierRem[i] <- calculateExtraReturnBuyOutLierRemove(valuesToTry[i])
}
cbind(valuesToTry, ExtraReturnForValueBuy, ExtraReturnForValueBuyOutlierRem, ExtraReturnForValueSell)
cbind(valuesToTry, ExtraReturnForValueBuy, ExtraReturnForValueBuyOutlierRem, ExtraReturnForValueSell)
optBuy = optimise(calculateExtraReturnBuy, interval = c(1,40), maximum = T)
optBuyOutlierRem = optimise(calculateExtraReturnBuyOutLierRemove, interval = c(1,40), maximum = T)
optSell = optimise(calculateExtraReturnSell, interval = c(1,40), maximum = T)
plot(valuesToTry, ExtraReturnForValueBuy, type = 'l', ylab ="Extra Return Posible", xlab ="Value",
main = "Simple backtest of optimal betting strategy", sub = sprintf("OptBuy is %f, optSell is %f, optBuyOutRem is %f",
optBuy$maximum, optSell$maximum, optBuyOutlierRem$maximum))
lines(valuesToTry, ExtraReturnForValueSell, col = 2)
lines(valuesToTry, ExtraReturnForValueBuyOutlierRem, col = 3)
legend("bottomright", legend = c("Buy", "Sell", "Buy Outlier Rem."), col = 1:3, lty = 1, pch = 1)
#text(60,35000, sprintf("OptBuy is %f, optSell is %f, optBuyOutRem is %f", optBuy$maximum, optSell$maximum, optBuyOutlierRem$maximum))
points(optBuy$maximum, optBuy$objective)
points(optSell$maximum, optSell$objective, col = "red")
points(optBuyOutlierRem$maximum, optBuyOutlierRem$objective, col = 3)
load("~/Dropbox/DTU_(Semester_9)/SC_EnergyTrading/IdeaFromPeter/.RData")
dfBuy2$VWAP_no_extremes <- as.numeric((dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0]))
plotdist(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), histo = TRUE, demp = TRUE)
par(mfrow = c(1,1))
descdist(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), boot = 1000)
# Import required libraries
library(readr)
library(ggplot2)
library(fitdistrplus)
library(texreg)
library(lubridate)
library(caret)
dfBuy2$VWAP_no_extremes <- as.numeric((dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0]))
plotdist(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), histo = TRUE, demp = TRUE)
par(mfrow = c(1,1))
descdist(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), boot = 1000)
fit_lognormal <- fitdistr(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), "lognormal")
print(fit_lognormal)
hist(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), breaks = 500, freq = F)
vals = seq(0.1, 1500, 0.1)
lines(vals, dlnorm(vals, meanlog = 5.454, sdlog = 0.58), type = "l", col = 2)
## VWAP plot
plot(dfBuy2$VWAPrice, xlim = c(1,100), ylim = c(0,1000))
lines(dfBuy2$BestPrice, col = "red")
lines(dfBuy2$ClearingPrice, col = "blue")
percentageVWAP <- 100*(dfBuy2$ClearingPrice - dfBuy2$VWAPrice)/dfBuy2$ClearingPrice
hist( percentageVWAP[percentageVWAP != 0] , breaks = 5000, freq = F)
percentageVWAP_fit <- fitdistr(as.numeric(na.omit(percentageVWAP[percentageVWAP != 0])), "lognormal")
print(percentageVWAP_fit)
vals = seq(0.01, 70, 0.01)
lines(vals, dlnorm(vals, meanlog = percentageVWAP_fit$estimate[1], sdlog = percentageVWAP_fit$estimate[2]), type = "l", col = 2)
testlist = list(shape1 = 1, shape2 = 0.5, ncp = 2)
vwap_vals <- as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0]))
fitdistr(vwap_vals/max(vwap_vals), dbeta, testlist, lower = 0, upper = 1)
cbind(valuesToTry, ExtraReturnForValueBuy, ExtraReturnForValueBuyOutlierRem, ExtraReturnForValueSell)
optBuy = optimise(calculateExtraReturnBuy, interval = c(1,40), maximum = T)
optBuyOutlierRem = optimise(calculateExtraReturnBuyOutLierRemove, interval = c(1,40), maximum = T)
optSell = optimise(calculateExtraReturnSell, interval = c(1,40), maximum = T)
plot(valuesToTry, ExtraReturnForValueBuy, type = 'l', ylab ="Extra Return Posible", xlab ="Value",
main = "Simple backtest of optimal betting strategy", sub = sprintf("OptBuy is %f, optSell is %f, optBuyOutRem is %f",
optBuy$maximum, optSell$maximum, optBuyOutlierRem$maximum))
lines(valuesToTry, ExtraReturnForValueSell, col = 2)
lines(valuesToTry, ExtraReturnForValueBuyOutlierRem, col = 3)
legend("bottomright", legend = c("Buy", "Sell", "Buy Outlier Rem."), col = 1:3, lty = 1, pch = 1)
#text(60,35000, sprintf("OptBuy is %f, optSell is %f, optBuyOutRem is %f", optBuy$maximum, optSell$maximum, optBuyOutlierRem$maximum))
points(optBuy$maximum, optBuy$objective)
points(optSell$maximum, optSell$objective, col = "red")
points(optBuyOutlierRem$maximum, optBuyOutlierRem$objective, col = 3)
round(2.3232,2)
optBuy = optimise(calculateExtraReturnBuy, interval = c(1,40), maximum = T)
optBuyOutlierRem = optimise(calculateExtraReturnBuyOutLierRemove, interval = c(1,40), maximum = T)
optSell = optimise(calculateExtraReturnSell, interval = c(1,40), maximum = T)
plot(valuesToTry, ExtraReturnForValueBuy, type = 'l', ylab ="Extra Return Posible", xlab ="Value",
main = "Simple backtest of optimal betting strategy", sub = sprintf("OptBuy is %f, optSell is %f, optBuyOutRem is %f",
round(optBuy$maximum,3), round(optSell$maximum,3), round(optBuyOutlierRem$maximum,3)))
lines(valuesToTry, ExtraReturnForValueSell, col = 2)
lines(valuesToTry, ExtraReturnForValueBuyOutlierRem, col = 3)
legend("bottomright", legend = c("Buy", "Sell", "Buy Outlier Rem."), col = 1:3, lty = 1, pch = 1)
#text(60,35000, sprintf("OptBuy is %f, optSell is %f, optBuyOutRem is %f", optBuy$maximum, optSell$maximum, optBuyOutlierRem$maximum))
points(optBuy$maximum, optBuy$objective)
points(optSell$maximum, optSell$objective, col = "red")
points(optBuyOutlierRem$maximum, optBuyOutlierRem$objective, col = 3)
plot(valuesToTry, ExtraReturnForValueBuy, type = 'l', ylab ="Extra Return Posible", xlab ="Value",
main = "Simple backtest of optimal betting strategy", sub = sprintf("OptBuy is %.2f, optSell is %.2f, optBuyOutRem is %.2f",
round(optBuy$maximum,3), round(optSell$maximum,3), round(optBuyOutlierRem$maximum,3)))
plot(valuesToTry, ExtraReturnForValueBuy, type = 'l', ylab ="Extra Return Posible", xlab ="Value",
main = "Simple backtest of optimal betting strategy", sub = sprintf("OptBuy is %.3f, optSell is %.3f, optBuyOutRem is %.3f",
round(optBuy$maximum,3), round(optSell$maximum,3), round(optBuyOutlierRem$maximum,3)))
lines(valuesToTry, ExtraReturnForValueSell, col = 2)
plot(valuesToTry, ExtraReturnForValueBuy, type = 'l', ylab ="Extra Return Posible", xlab ="Value",
main = "Simple backtest of optimal betting strategy", sub = sprintf("OptBuy is %.3f, optSell is %.3f, optBuyOutRem is %.3f",
round(optBuy$maximum,5), round(optSell$maximum,5), round(optBuyOutlierRem$maximum,5)))
lines(valuesToTry, ExtraReturnForValueSell, col = 2)
lines(valuesToTry, ExtraReturnForValueBuyOutlierRem, col = 3)
legend("bottomright", legend = c("Buy", "Sell", "Buy Outlier Rem."), col = 1:3, lty = 1, pch = 1)
#text(60,35000, sprintf("OptBuy is %f, optSell is %f, optBuyOutRem is %f", optBuy$maximum, optSell$maximum, optBuyOutlierRem$maximum))
points(optBuy$maximum, optBuy$objective)
points(optSell$maximum, optSell$objective, col = "red")
points(optBuyOutlierRem$maximum, optBuyOutlierRem$objective, col = 3)
t.incr <- 5000 # approx a month
View(df)
View(gb_countertrades)
## VWAP plot
plot(dfBuy2$VWAPrice, xlim = c(1,100), ylim = c(0,1000))
lines(dfBuy2$BestPrice, col = "red")
lines(dfBuy2$ClearingPrice, col = "blue")
percentageVWAP <- 100*(dfBuy2$ClearingPrice - dfBuy2$VWAPrice)/dfBuy2$ClearingPrice
hist( percentageVWAP[percentageVWAP != 0] , breaks = 5000, freq = F)
dfBuy2$VWAP_no_extremes <- as.numeric((dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0]))
plotdist(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), histo = TRUE, demp = TRUE)
par(mfrow = c(1,1))
descdist(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), boot = 1000)
fit_lognormal <- fitdistr(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), "lognormal")
descdist(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), boot = 1000)
fit_lognormal <- fitdistr(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), "lognormal")
print(fit_lognormal)
hist(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), breaks = 500, freq = F)
vals = seq(0.1, 1500, 0.1)
lines(vals, dlnorm(vals, meanlog = 5.454, sdlog = 0.58), type = "l", col = 2)
hist(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), breaks = 500, freq = F, main = "Histogram of VWAP", xlab = "VWAP", col = rgb(1,0,0,0.5))
hist(as.numeric(na.omit(dfBuy2$VWAPrice[dfBuy2$VWAPrice< 1500 & dfBuy2$VWAPrice != 0])), breaks = 500, freq = F, main = "Histogram of VWAP", xlab = "VWAP", col = rgb(0,0,0,0.5))
vals = seq(0.1, 1500, 0.1)
lines(vals, dlnorm(vals, meanlog = 5.454, sdlog = 0.58), type = "l", col = 2)
percentageVWAP <- 100*(dfBuy2$ClearingPrice - dfBuy2$VWAPrice)/dfBuy2$ClearingPrice
hist( percentageVWAP[percentageVWAP != 0] , breaks = 5000, freq = F)
percentageVWAP_fit <- fitdistr(as.numeric(na.omit(percentageVWAP[percentageVWAP != 0])), "lognormal")
print(percentageVWAP_fit)
vals = seq(0.01, 70, 0.01)
lines(vals, dlnorm(vals, meanlog = percentageVWAP_fit$estimate[1], sdlog = percentageVWAP_fit$estimate[2]), type = "l", col = 2)
hist( percentageVWAP[percentageVWAP != 0] , breaks = 5000, freq = F, main = "Histogram of %-VWAP", xlab = "VWAP", col = rgb(0,0,0,0.5))
percentageVWAP_fit <- fitdistr(as.numeric(na.omit(percentageVWAP[percentageVWAP != 0])), "lognormal")
print(percentageVWAP_fit)
vals = seq(0.01, 70, 0.01)
lines(vals, dlnorm(vals, meanlog = percentageVWAP_fit$estimate[1], sdlog = percentageVWAP_fit$estimate[2]), type = "l", col = 2, lwd = 2)
install.packages("onlineforecast")
?onlineforecast
??onlineforecast
?rls_fit
??rls_fit
clc
clear
clear()
?rq
doc rq
??rq
library(quantreg)
rq(2~5)
rq(c(1,2,3)~c(5,4,3))
setwd("~/Dropbox/DTU (Semester 10)/MscThesis/MscThesisCode_NN")
?rq
